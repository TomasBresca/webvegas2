---
// src/pages/admin.astro
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import { validateToken, getAllWhatsAppEntries, generateCSRFToken } from '../data/auth';

// Interfaz para entradas WhatsApp
interface WhatsAppEntry {
  heroId: number;
  number: string;
}

// Verificar autenticación
const token = Astro.cookies.get('auth_token')?.value;
const sessionId = Astro.cookies.get('session_id')?.value;

if (!token || !sessionId) {
  return Astro.redirect('/admin-login');
}

const tokenValidation = validateToken(token);
if (!tokenValidation.valid || !tokenValidation.payload) {
  return Astro.redirect('/admin-login');
}

// Generar nuevo CSRF token
const csrfToken = generateCSRFToken(sessionId);

// Obtener todas las entradas
const entries = await getAllWhatsAppEntries();

// Security headers
Astro.response.headers.set('X-Content-Type-Options', 'nosniff');
Astro.response.headers.set('X-Frame-Options', 'DENY');
Astro.response.headers.set('X-XSS-Protection', '1; mode=block');
Astro.response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate, private');
Astro.response.headers.set('Pragma', 'no-cache');
Astro.response.headers.set('Expires', '0');
---

<Layout title="Panel de Administración">
  <main class="container mx-auto py-8 px-4 max-w-4xl">
    <h1 class="text-3xl font-bold mb-6 text-center">Panel de Administración</h1>
    
    <input type="hidden" id="csrf-token" value={csrfToken} />
    
    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-xl font-bold mb-4">Números de WhatsApp</h2>
      
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-200">
          <thead>
            <tr>
              <th class="py-2 px-4 border-b text-left text-black">Hero ID</th>
              <th class="py-2 px-4 border-b text-left text-black">Número</th>
              <th class="py-2 px-4 border-b text-center text-black">Acciones</th>
            </tr>
          </thead>
          <tbody id="entries-table">
            {entries.map(entry => (
              <tr class="hover:bg-gray-50 text-black">
                <td class="py-2 px-4 border-b">
                  <input 
                    type="number" 
                    value={entry.heroId} 
                    min="1"
                    data-original-hero-id={entry.heroId}
                    class="hero-id-input w-20 px-2 py-1 border border-gray-300 rounded text-black"
                  />
                </td>
                <td class="py-2 px-4 border-b">
                  <input 
                    type="text" 
                    value={entry.number} 
                    class="whatsapp-number-input w-full px-2 py-1 border border-gray-300 rounded text-black"
                  />
                </td>
                <td class="py-2 px-4 border-b text-center">
                  <button 
                    data-hero-id={entry.heroId} 
                    class="update-entry bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded mr-2"
                  >
                    Actualizar
                  </button>
                  <button 
                    data-hero-id={entry.heroId} 
                    class="delete-entry bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                  >
                    Eliminar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <div class="mt-6">
        <h3 class="font-bold mb-2">Agregar Nuevo Número</h3>
        <div class="flex space-x-2">
          <div class="flex-none">
            <label class="block text-sm text-gray-600 mb-1">Hero ID</label>
            <input 
              type="number" 
              id="new-hero-id" 
              min="1"
              class="w-20 px-3 py-2 border border-gray-300 rounded text-black"
            />
          </div>
          <div class="flex-1">
            <label class="block text-sm text-gray-600 mb-1">Número</label>
            <input 
              type="text" 
              id="new-number" 
              placeholder="Nuevo número de WhatsApp" 
              class="w-full px-3 py-2 border border-gray-300 rounded text-black"
            />
          </div>
          <div class="flex-none self-end">
            <button 
              id="add-entry" 
              class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded"
            >
              Agregar
            </button>
          </div>
        </div>
      </div>
      
      <div id="status-message" class="mt-4 p-3 hidden"></div>
    </div>
    
    <div class="text-center">
      <button 
        id="logout-button"
        class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded"
      >
        Cerrar Sesión
      </button>
    </div>
  </main>
</Layout>

<script>
  // Interfaz para respuestas de API
  interface ApiResponse {
    success?: boolean;
    error?: string;
  }

  // Obtener CSRF token
  function getCSRFToken(): string {
    const tokenElement = document.getElementById('csrf-token') as HTMLInputElement | null;
    if (!tokenElement || !tokenElement.value) {
      throw new Error('CSRF token not found');
    }
    return tokenElement.value;
  }
  
  // Mostrar mensaje de estado
  function showStatus(message: string, type: 'success' | 'error'): void {
    const statusMessage = document.getElementById('status-message') as HTMLDivElement | null;
    if (!statusMessage) return;
    
    statusMessage.textContent = message;
    statusMessage.classList.remove('hidden', 'bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');
    
    if (type === 'success') {
      statusMessage.classList.add('bg-green-100', 'text-green-800');
    } else {
      statusMessage.classList.add('bg-red-100', 'text-red-800');
    }
  }
  
  // Actualizar el estado visual de la entrada
  function updateEntryStatus(row: HTMLTableRowElement, isModified: boolean): void {
    const updateButton = row.querySelector('.update-entry') as HTMLButtonElement;
    const numberInput = row.querySelector('.whatsapp-number-input') as HTMLInputElement;
    const heroIdInput = row.querySelector('.hero-id-input') as HTMLInputElement;
    
    // Reset classes first
    updateButton.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'bg-green-500', 'hover:bg-green-600');
    
    if (isModified) {
      // Unsaved state - blue
      updateButton.classList.add('bg-blue-500', 'hover:bg-blue-600');
      updateButton.textContent = 'Actualizar';
      numberInput.classList.add('border-blue-500');
      heroIdInput.classList.add('border-blue-500');
    } else {
      // Saved state - green
      updateButton.classList.add('bg-green-500', 'hover:bg-green-600');
      updateButton.textContent = 'Guardado';
      numberInput.classList.remove('border-blue-500');
      heroIdInput.classList.remove('border-blue-500');
    }
  }
  
  // Actualizar entrada
  async function updateEntry(oldHeroId: number, newHeroId: number, number: string): Promise<boolean> {
    try {
      const csrfToken = getCSRFToken();
      
      // Validación
      if (newHeroId < 1) {
        showStatus('Hero ID debe ser mayor a 1', 'error');
        return false;
      }
      
      if (!/^\d+$/.test(number)) {
        showStatus('El número debe contener solo dígitos', 'error');
        return false;
      }
      
      const response = await fetch('/api/updateEntry', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ oldHeroId, newHeroId, number, csrfToken })
      });
      
      const data = await response.json() as ApiResponse;
      
      if (response.ok && data.success) {
        showStatus(`Entrada actualizada correctamente`, 'success');
        return true;
      } else {
        showStatus(data.error || 'Error al actualizar entrada', 'error');
        return false;
      }
    } catch (error) {
      console.error('Update error:', error);
      showStatus('Error de conexión', 'error');
      return false;
    }
  }
  
  // Eliminar entrada
  async function deleteEntry(heroId: number): Promise<boolean> {
    try {
      console.log(`Attempting to delete entry for Hero ID: ${heroId}`);
      
      const csrfToken = getCSRFToken();
      
      // Add validation
      if (!heroId || heroId < 1) {
        console.error(`Invalid heroId: ${heroId}`);
        showStatus('ID de Hero inválido', 'error');
        return false;
      }
      
      console.log(`Sending delete request for Hero ID: ${heroId}`);
      const response = await fetch('/api/deleteEntry', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ heroId, csrfToken })
      });
      
      console.log(`Delete API response status: ${response.status}`);
      const data = await response.json() as ApiResponse;
      console.log(`Delete API response data:`, data);
      
      if (response.ok && data.success) {
        console.log(`Successfully deleted entry for Hero ID: ${heroId}`);
        showStatus(`Entrada eliminada correctamente`, 'success');
        return true;
      } else {
        console.error(`Error deleting entry: ${data.error || 'Unknown error'}`);
        showStatus(data.error || 'Error al eliminar entrada', 'error');
        return false;
      }
    } catch (error) {
      console.error('Error executing delete request:', error);
      showStatus('Error de conexión', 'error');
      return false;
    }
  }
  
  // Crear entrada
  async function createEntry(heroId: number, number: string): Promise<boolean> {
    try {
      const csrfToken = getCSRFToken();
      
      // Validación
      if (!heroId || heroId < 1 ) {
        showStatus('Hero ID debe ser mayor a 1', 'error');
        return false;
      }
      
      if (!number || !/^\d+$/.test(number)) {
        showStatus('El número debe contener solo dígitos', 'error');
        return false;
      }
      
      const response = await fetch('/api/createEntry', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ heroId, number, csrfToken })
      });
      
      const data = await response.json() as ApiResponse;
      
      if (response.ok && data.success) {
        showStatus('Nueva entrada agregada correctamente', 'success');
        return true;
      } else {
        showStatus(data.error || 'Error al agregar entrada', 'error');
        return false;
      }
    } catch (error) {
      console.error('Create error:', error);
      showStatus('Error de conexión', 'error');
      return false;
    }
  }
  
  // Eventos
  document.addEventListener('DOMContentLoaded', () => {
    // Marcar todas las filas como guardadas inicialmente
    document.querySelectorAll('tbody tr').forEach((row) => {
      updateEntryStatus(row as HTMLTableRowElement, false);
    });
    
    // Rastrear cambios en inputs de número y heroId
    document.querySelectorAll('.whatsapp-number-input, .hero-id-input').forEach((inputElement) => {
      const input = inputElement as HTMLInputElement;
      // Almacenar valor original como atributo de datos
      input.dataset.originalValue = input.value;
      
      input.addEventListener('input', () => {
        const row = input.closest('tr') as HTMLTableRowElement;
        if (!row) return;
        
        const numberInput = row.querySelector('.whatsapp-number-input') as HTMLInputElement;
        const heroIdInput = row.querySelector('.hero-id-input') as HTMLInputElement;
        
        // Verificar si algún input ha sido modificado
        const numberModified = numberInput.value !== numberInput.dataset.originalValue;
        const heroIdModified = heroIdInput.value !== heroIdInput.dataset.originalValue;
        
        updateEntryStatus(row, numberModified || heroIdModified);
      });
    });
    
    // Botones de actualizar
    document.querySelectorAll('.update-entry').forEach((buttonElement) => {
      const button = buttonElement as HTMLButtonElement;
      button.addEventListener('click', async () => {
        const oldHeroId = parseInt(button.getAttribute('data-hero-id') || '0');
        const row = button.closest('tr');
        
        if (!row) return;
        
        const heroIdInput = row.querySelector('.hero-id-input') as HTMLInputElement | null;
        const numberInput = row.querySelector('.whatsapp-number-input') as HTMLInputElement | null;
        
        if (oldHeroId && heroIdInput && numberInput) {
          const newHeroId = parseInt(heroIdInput.value);
          const number = numberInput.value.trim();
          
          const success = await updateEntry(oldHeroId, newHeroId, number);
          if (success) {
            // Actualizar atributos de datos
            button.setAttribute('data-hero-id', newHeroId.toString());
            heroIdInput.setAttribute('data-original-hero-id', newHeroId.toString());
            
            // Actualizar valores originales almacenados
            heroIdInput.dataset.originalValue = heroIdInput.value;
            numberInput.dataset.originalValue = numberInput.value;
            
            // Actualizar también el botón de eliminar
            const deleteButton = row.querySelector('.delete-entry') as HTMLButtonElement | null;
            if (deleteButton) {
              deleteButton.setAttribute('data-hero-id', newHeroId.toString());
            }
            
            // Actualizar estado visual a guardado
            updateEntryStatus(row as HTMLTableRowElement, false);
            
            console.log(`Entrada actualizada: Hero ID ${oldHeroId} -> ${newHeroId}, Número: ${number}`);
          }
        }
      });
    });
    
    // Botones de eliminar
    document.querySelectorAll('.delete-entry').forEach((buttonElement) => {
      const button = buttonElement as HTMLButtonElement;
      button.addEventListener('click', async () => {
        const heroId = parseInt(button.getAttribute('data-hero-id') || '0');
        
        if (heroId) {
          if (confirm(`¿Eliminar la entrada para Hero ID ${heroId}?`)) {
            const success = await deleteEntry(heroId);
            if (success) {
              // Eliminar la fila de la tabla
              const row = button.closest('tr');
              if (row) {
                row.remove();
                console.log(`Entrada eliminada: Hero ID ${heroId}`);
              }
            }
          }
        }
      });
    });
    
    // Botón agregar
    const addButton = document.getElementById('add-entry') as HTMLButtonElement | null;
    if (addButton) {
      addButton.addEventListener('click', async () => {
        const heroIdInput = document.getElementById('new-hero-id') as HTMLInputElement | null;
        const numberInput = document.getElementById('new-number') as HTMLInputElement | null;
        
        if (!heroIdInput || !numberInput) return;
        
        const heroId = parseInt(heroIdInput.value);
        const number = numberInput.value.trim();
        
        const success = await createEntry(heroId, number);
        if (success) {
          // Registramos la acción
          console.log(`Nueva entrada creada: Hero ID ${heroId}, Número: ${number}`);
          
          // Recargar la página para mostrar la nueva entrada
          window.location.reload();
        }
      });
    }
    
    // Botón cerrar sesión
    const logoutButton = document.getElementById('logout-button') as HTMLButtonElement | null;
    if (logoutButton) {
      logoutButton.addEventListener('click', async () => {
        try {
          // Clear cookies through server request
          const response = await fetch('/api/logout', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            console.log('Sesión cerrada');
            window.location.href = '/admin-login';
          } else {
            // Fallback
            window.location.href = '/admin-login';
          }
        } catch (error) {
          console.error('Logout error:', error);
          window.location.href = '/admin-login';
        }
      });
    }
  });
</script>