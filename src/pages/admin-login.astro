---
// src/pages/admin-login.astro
export const prerender = false;
import Layout from '../layouts/Layout.astro';

// Si ya hay sesión, redirigir a admin
const token = Astro.cookies.get('auth_token')?.value;
if (token) {
  return Astro.redirect('/admin');
}
---

<Layout title="Login Administrador">
  <main class="container mx-auto py-10 px-4 max-w-md">
    <h1 class="text-2xl font-bold mb-6 text-center">Acceso Administrador</h1>
    
    <form id="loginForm" class="bg-white p-6 rounded-lg shadow-md">
      <div class="mb-4">
        <label for="username" class="block text-gray-700 mb-2">Usuario:</label>
        <input 
          type="text" 
          id="username" 
          autocomplete="username"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
          required
        />
      </div>
      
      <div class="mb-6">
        <label for="password" class="block text-gray-700 mb-2">Contraseña:</label>
        <input 
          type="password" 
          id="password" 
          autocomplete="current-password"
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
          required
        />
      </div>
      
      <button 
        type="submit" 
        class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300"
      >
        Iniciar Sesión
      </button>
      
      <div id="errorMessage" class="mt-4 text-red-500 text-center hidden"></div>
    </form>
  </main>
</Layout>

<script>
  const loginForm = document.getElementById('loginForm') as HTMLFormElement;
  const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
  
  // Función para establecer cookie segura
  function setSecureCookie(name: string, value: string, maxAge: number): void {
    const isSecure = window.location.protocol === 'https:';
    const cookieOptions = [
      `${name}=${value}`,
      'path=/',
      `max-age=${maxAge}`,
      'SameSite=Strict'
    ];
    
    if (isSecure) {
      cookieOptions.push('Secure');
    }
    
    // Nota: HttpOnly no se puede establecer desde JavaScript por seguridad
    // Esto debería manejarse desde el servidor en producción
    document.cookie = cookieOptions.join('; ');
  }
  
  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const username = (document.getElementById('username') as HTMLInputElement).value.trim();
    const password = (document.getElementById('password') as HTMLInputElement).value;
    
    // Validación básica del lado cliente
    if (!username || !password) {
      errorMessage.textContent = 'Todos los campos son requeridos';
      errorMessage.classList.remove('hidden');
      return;
    }
    
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ username, password })
      });
      
      const data = await response.json();
      
      if (response.ok && data.token) {
        // Establecer cookie segura
        setSecureCookie('auth_token', data.token, 3600); // 1 hora
        
        // Limpiar formulario
        (document.getElementById('username') as HTMLInputElement).value = '';
        (document.getElementById('password') as HTMLInputElement).value = '';
        
        // Redirigir
        window.location.href = '/admin';
      } else {
        errorMessage.textContent = data.error || 'Error de autenticación';
        errorMessage.classList.remove('hidden');
        
        // Limpiar password en caso de error
        (document.getElementById('password') as HTMLInputElement).value = '';
      }
    } catch (error) {
      console.error('Login error:', error);
      errorMessage.textContent = 'Error de conexión. Intenta nuevamente.';
      errorMessage.classList.remove('hidden');
    }
  });
  
  // Limpiar mensajes de error cuando el usuario empiece a escribir
  document.getElementById('username')?.addEventListener('input', () => {
    errorMessage.classList.add('hidden');
  });
  
  document.getElementById('password')?.addEventListener('input', () => {
    errorMessage.classList.add('hidden');
  });
</script>