---
// src/pages/[id].astro
export const prerender = false;

// Importamos los componentes necesarios
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import Beneficios from '../components/Beneficios.astro';
import Promociones from '../components/Promociones.astro';
import Juegos from '../components/Juegos.astro';
import Registro from '../components/Registro.astro';
import Soporte from '../components/Soporte.astro';
import Footer from '../components/Footer.astro';

// Importamos la función para obtener el número de WhatsApp
import { getWhatsAppNumber } from '../data/auth';

// Importar dinámicamente todos los componentes Hero
const heroModules = import.meta.glob('../heros/Hero(*).astro');

// Definir tipos para evitar errores de TypeScript
type HeroComponentImport = () => Promise<{ default: any }>;
type HeroComponentsMap = Record<string, HeroComponentImport>;

// Preparar mapa de componentes Hero y lista de versiones válidas
const heroComponents: HeroComponentsMap = {};
const validVersions: string[] = [];

// Procesamos las rutas de los módulos para extraer los IDs
Object.keys(heroModules).forEach(path => {
  const matches = path.match(/Hero\((\d+)\)\.astro$/);
  if (matches && matches[1]) {
    const num = parseInt(matches[1]);
    const paddedId = num.toString().padStart(2, '0');
    validVersions.push(paddedId);
    heroComponents[paddedId] = heroModules[path] as HeroComponentImport;
  }
});

// Ordenamos las versiones para consistencia
validVersions.sort();

// Obtener el parámetro de la URL
const { id } = Astro.params;

// Comprobar si el ID es una versión válida
function isValidVersion(id: string | undefined): boolean {
  return Boolean(id && validVersions.includes(id));
}

// Si el ID no es válido, redirigir a la versión predeterminada
if (!isValidVersion(id)) {
  return Astro.redirect(`/${validVersions[0] || '01'}`);
}

// Convertir ID a número de hero (01 -> 1, 02 -> 2, etc.)
const heroId = parseInt(id || '0');

// Obtener el número de WhatsApp para este hero
let whatsappNumber = '';
try {
  whatsappNumber = await getWhatsAppNumber(heroId);
  console.log(`Hero ${heroId} usando número WhatsApp: ${whatsappNumber}`);
} catch (error) {
  console.error(`Error al obtener número para Hero ${heroId}:`, error);
  whatsappNumber = '5491123456789'; // Número por defecto
}

// Crear enlaces de WhatsApp
const whatsappText = 'Holaa%20quiero%20crear%20mi%20cuenta';
const whatsappLink = `https://wa.me/${whatsappNumber}?text=${whatsappText}`;

// Cargar dinámicamente el componente Hero correspondiente
const HeroComponent = id ? (await heroComponents[id]()).default : null;

// Configuración de eventos de pixel para cada versión
const pixelEvent = `Lead${id}`;

// Token de Facebook Pixel
const pixelToken = '1654651481848094';
---

<Layout title={`Las Vegas ${id} - Plataforma Premium`}>
  <!-- Facebook Pixel Code -->
  <script define:vars={{ pixelToken, pixelEvent }}>
    // Verificar si es un entorno de prueba
    function checkForTestMode() {
      // Buscar el parámetro fbpixel_test en la URL actual
      const params = new URLSearchParams(window.location.search);
      const testCode = params.get('fbpixel_test');
      return testCode === 'TEST8130';
    }

    !function(f,b,e,v,n,t,s)
    {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
    n.callMethod.apply(n,arguments):n.queue.push(arguments)};
    if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
    n.queue=[];t=b.createElement(e);t.async=!0;
    t.src=v;s=b.getElementsByTagName(e)[0];
    s.parentNode.insertBefore(t,s)}(window, document,'script',
    'https://connect.facebook.net/en_US/fbevents.js');
    fbq('init', pixelToken);

    // Activar modo de prueba si se detecta el parámetro
    if (checkForTestMode()) {
      fbq('set', 'autoConfig', false, pixelToken);
      console.log('Facebook Pixel Test Mode: TEST8130 activated');
    }
     
    fbq('track', pixelEvent);
  </script>
  <noscript>
    <img height="1" width="1" style="display:none"
    src={`https://www.facebook.com/tr?id=${pixelToken}&ev=${pixelEvent}&noscript=1`}
    />
  </noscript>
  <!-- End Facebook Pixel Code -->
  
  <!-- Manychat -->
  <script src="//widget.manychat.com/2686937_1c05d.js" defer="defer"></script>
  <script src="https://mccdn.me/assets/js/widget.js" defer="defer"></script>
  <!-- End Manychat -->

  <Navbar registrationLink={whatsappLink} />
  
  <!-- Renderiza el Hero específico para esta versión con el número de WhatsApp -->
  {HeroComponent && (
    <HeroComponent 
      whatsappLink1={whatsappLink} 
      whatsappLink2={whatsappLink} 
      pixelEvent={pixelEvent}
    />
  )}
  
  <Beneficios />
  
  <Promociones registrationLink={whatsappLink} />
  
  <Juegos registrationLink={whatsappLink} />
  
  <Registro registrationLink={whatsappLink} />
  
  <Soporte whatsappLink1={whatsappLink} whatsappLink2={whatsappLink} />
  
  <Footer registrationLink={whatsappLink} whatsappLink1={whatsappLink} whatsappLink2={whatsappLink} />
</Layout>