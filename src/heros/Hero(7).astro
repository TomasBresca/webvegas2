---
const { whatsappLink1, whatsappLink2, pixelEvent } = Astro.props;
import '../styles/global.css';
---
<section class="relative min-h-screen flex flex-col items-center pt-20 md:pt-24 pb-10 bg-gradient-to-b from-casino-purple to-[#1A0F36] overflow-hidden w-full">
  <!-- Efectos de luz fluida en el fondo -->
  <div class="absolute inset-0 z-0 overflow-hidden">
    <div class="fluid-light fluid-red"></div>
    <div class="fluid-light fluid-blue"></div>
    <div class="fluid-light fluid-red-small"></div>
    <div class="fluid-light fluid-blue-small"></div>
  </div>
  
  <!-- Elementos flotantes decorativos -->
  <div class="absolute inset-0 pointer-events-none">
    <div class="floating-element absolute top-1/4 left-10 w-12 h-12 opacity-30">
      <img src="/images/chips.svg" alt="" class="w-full h-full" />
    </div>
    <div class="floating-element absolute top-2/3 right-12 w-16 h-16 opacity-20" style="animation-delay: 1s;">
      <img src="/images/ace.svg" alt="" class="w-full h-full" />
    </div>
    <div class="floating-element absolute bottom-1/4 left-1/3 w-14 h-14 opacity-25" style="animation-delay: 0.5s;">
      <img src="/images/gambling.svg" alt="" class="w-full h-full" />
    </div>
    <div class="floating-element absolute top-1/3 right-1/4 w-10 h-10 opacity-20" style="animation-delay: 1.5s;">
      <img src="/images/ace.svg" alt="" class="w-full h-full" />
    </div>
  </div>
  
  <div class="w-full px-4 md:px-10 max-w-7xl mx-auto relative z-10 py-6 md:py-10">
    <!-- Encabezado -->
    <div class="text-center mb-8">
      <h1 class="text-4xl md:text-5xl lg:text-6xl text-white uppercase hero-title">
        <span class="gradient-text font-bold">GANADORES</span> EN <span class="text-casino-gold">VIVO</span>
      </h1>
      
      <h2 class="text-xl md:text-2xl lg:text-3xl font-accent text-white/80 mt-4 hero-subtitle">
        ¡VOS podrías ser el <span class="gradient-text font-bold">PRÓXIMO!</span>
      </h2>
    </div>
    
    <!-- Tabla de ganadores en vivo -->
    <div class="max-w-3xl mx-auto">
      <div class="card-comparison card-vegas rounded-xl p-3 md:p-6 shadow-2xl relative border-2 border-casino-gold">
        <div class="absolute -top-4 left-1/2 transform -translate-x-1/2 bg-casino-gold text-black px-6 py-1 rounded-full text-sm font-bold z-10">
          EN VIVO
        </div>
        
        <div class="live-indicator flex items-center justify-center mb-3 gap-2">
          <span class="inline-block w-3 h-3 bg-green-500 rounded-full pulse-animation"></span>
          <span class="text-white text-sm">Actualizando en tiempo real</span>
        </div>
        
        <!-- Tabla de ganadores -->
        <div class="overflow-hidden rounded-lg border border-casino-gold/30">
          <table class="w-full text-white winners-table">
            <thead>
              <tr class="bg-casino-purple-dark">
                <th class="py-3 px-2 text-left text-casino-gold font-bold">Usuario</th>
                <th class="py-3 px-2 text-left text-casino-gold font-bold">Juego</th>
                <th class="py-3 px-2 text-right text-casino-gold font-bold">Premio</th>
              </tr>
            </thead>
            <tbody id="winners-table-body">
              <!-- La tabla se llenará con JavaScript -->
            </tbody>
          </table>
        </div>
        
        <div class="mt-6">
          <div class="stats-container flex flex-col gap-2">
            <div class="stat-card bg-casino-purple-dark border border-casino-gold/40 rounded-lg py-2 px-3 text-center flex justify-between items-center">
              <p class="text-white/70 text-sm">Total Ganadores Hoy:</p>
              <p id="total-winners-count" class="text-casino-gold text-lg md:text-xl font-bold ml-2">120</p>
            </div>
            <div class="stat-card bg-casino-purple-dark border border-casino-gold/40 rounded-lg py-2 px-3 text-center flex justify-between items-center">
              <p class="text-white/70 text-sm">Pagado Hoy:</p>
              <p id="total-paid-today" class="text-casino-gold text-lg md:text-xl font-bold ml-2 text-right flex-1 justify-end">$12,459,350</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Botones de acción -->
    <div class="flex flex-col sm:flex-row items-center justify-center gap-4 mt-6 mb-6">
      <a id="cta-button" href={whatsappLink1} target="_blank" rel="noopener" class="whatsapp-btn flex items-center justify-center gap-2 bg-green-600 hover:bg-green-700 text-white font-bold py-4 px-8 rounded-lg transition-all hover:scale-105 shadow-lg w-full sm:w-auto">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline" fill="white" viewBox="0 0 24 24">
          <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
        </svg>
        CREÁ TU CUENTA
      </a>
    </div>
  </div>
  
  <!-- Textura de fondo -->
  <div class="absolute inset-0 bg-grid-pattern opacity-5"></div>
</section>

<style>
  .bg-grid-pattern {
    background-image: 
      linear-gradient(rgba(255, 193, 7, 0.1) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 193, 7, 0.1) 1px, transparent 1px);
    background-size: 25px 25px;
  }
  
  .card-comparison {
    background: linear-gradient(to bottom, rgba(40, 20, 70, 0.8), rgba(30, 15, 55, 0.8));
    backdrop-filter: blur(5px);
    transition: all 0.3s ease;
    overflow: visible;
  }
  
  .card-vegas {
    background: linear-gradient(to bottom, rgba(53, 11, 45, 0.95), rgba(30, 15, 55, 0.95));
    box-shadow: 0 0 20px rgba(255, 193, 7, 0.3);
  }
  
  .winners-table tr {
    transition: background-color 0.5s ease;
  }
  
  .winners-table tr:nth-child(even) {
    background-color: rgba(40, 20, 70, 0.5);
  }
  
  .winners-table tr:hover {
    background-color: rgba(255, 193, 7, 0.1);
  }
  
  .winners-table td {
    padding: 0.75rem 0.5rem;
    border-bottom: 1px solid rgba(255, 193, 7, 0.1);
  }
  
  .pulse-animation {
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0% {
      transform: scale(0.95);
      box-shadow: 0 0 0 0 rgba(72, 199, 116, 0.7);
    }
    
    70% {
      transform: scale(1);
      box-shadow: 0 0 0 10px rgba(72, 199, 116, 0);
    }
    
    100% {
      transform: scale(0.95);
      box-shadow: 0 0 0 0 rgba(72, 199, 116, 0);
    }
  }
  
  .new-winner {
    animation: highlightRow 2s ease;
  }
  
  @keyframes highlightRow {
    0% { background-color: rgba(255, 193, 7, 0.3); }
    100% { background-color: transparent; }
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .winners-table td {
      padding: 0.5rem 0.3rem;
      font-size: 0.9rem;
    }
  }
  
  /* Animaciones para elementos flotantes */
  .floating-element:nth-child(1) {
    animation: floatElement1 6s ease-in-out infinite;
  }
  
  .floating-element:nth-child(2) {
    animation: floatElement2 9s ease-in-out infinite;
  }
  
  .floating-element:nth-child(3) {
    animation: floatElement3 8s ease-in-out infinite;
  }
  
  .floating-element:nth-child(4) {
    animation: floatElement4 10s ease-in-out infinite;
  }
  
  @keyframes floatElement1 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    33% { transform: translateY(-15px) rotate(5deg); }
    66% { transform: translateY(5px) rotate(-5deg); }
  }
  
  @keyframes floatElement2 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(-8deg); }
  }
  
  @keyframes floatElement3 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    25% { transform: translateY(-10px) rotate(8deg); }
    75% { transform: translateY(-18px) rotate(-5deg); }
  }
  
  @keyframes floatElement4 {
    0%, 100% { transform: translateY(0) rotate(0deg) scale(1); }
    30% { transform: translateY(-15px) rotate(10deg) scale(1.1); }
    60% { transform: translateY(8px) rotate(-5deg) scale(0.95); }
  }
  
  /* Efectos de luz fluida (rojo y azul) */
  .fluid-light {
    position: absolute;
    border-radius: 100%;
    filter: blur(60px);
    opacity: 0.7;
    mix-blend-mode: screen;
  }
  
  .fluid-red {
    background: radial-gradient(circle, rgba(255, 50, 50, 1) 0%, rgba(180, 0, 0, 0.8) 60%, rgba(100, 0, 0, 0) 100%);
    width: 60vw;
    height: 60vw;
    max-width: 700px;
    max-height: 700px;
    top: 5%;
    left: 25%;
    animation: fluidMove1 5s ease-in-out infinite alternate;
  }
  
  .fluid-blue {
    background: radial-gradient(circle, rgba(50, 100, 255, 1) 0%, rgba(0, 40, 180, 0.8) 60%, rgba(0, 0, 100, 0) 100%);
    width: 55vw;
    height: 55vw;
    max-width: 650px;
    max-height: 650px;
    bottom: 10%;
    right: 10%;
    animation: fluidMove2 7s ease-in-out infinite alternate;
  }
  
  .fluid-red-small {
    background: radial-gradient(circle, rgba(255, 50, 50, 1) 0%, rgba(180, 0, 0, 0.8) 60%, rgba(100, 0, 0, 0) 100%);
    width: 35vw;
    height: 35vw;
    max-width: 400px;
    max-height: 400px;
    bottom: 15%;
    left: 10%;
    animation: fluidMove3 6s ease-in-out infinite alternate;
  }
  
  .fluid-blue-small {
    background: radial-gradient(circle, rgba(50, 100, 255, 1) 0%, rgba(0, 40, 180, 0.8) 60%, rgba(0, 0, 100, 0) 100%);
    width: 30vw;
    height: 30vw;
    max-width: 350px;
    max-height: 350px;
    top: 20%;
    right: 5%;
    animation: fluidMove4 8s ease-in-out infinite alternate;
  }
  
  @keyframes fluidMove1 {
    0% { transform: translate(-15%, -15%) rotate(0deg); }
    25% { transform: translate(0%, 15%) rotate(90deg); }
    50% { transform: translate(15%, 0%) rotate(180deg); }
    75% { transform: translate(0%, -15%) rotate(270deg); }
    100% { transform: translate(-15%, -15%) rotate(360deg); }
  }
  
  @keyframes fluidMove2 {
    0% { transform: translate(15%, 15%) rotate(0deg); }
    25% { transform: translate(0%, -15%) rotate(-90deg); }
    50% { transform: translate(-15%, 0%) rotate(-180deg); }
    75% { transform: translate(0%, 15%) rotate(-270deg); }
    100% { transform: translate(15%, 15%) rotate(-360deg); }
  }
  
  @keyframes fluidMove3 {
    0% { transform: translate(-12%, -12%) rotate(0deg); }
    33% { transform: translate(12%, 0%) rotate(120deg); }
    66% { transform: translate(0%, 12%) rotate(240deg); }
    100% { transform: translate(-12%, -12%) rotate(360deg); }
  }
  
  @keyframes fluidMove4 {
    0% { transform: translate(12%, 12%) rotate(0deg); }
    33% { transform: translate(-12%, 0%) rotate(-120deg); }
    66% { transform: translate(0%, -12%) rotate(-240deg); }
    100% { transform: translate(12%, 12%) rotate(-360deg); }
  }
  
  @media (max-width: 768px) {
    .fluid-red, .fluid-blue {
      width: 80vw;
      height: 80vw;
    }
    
    .fluid-red-small, .fluid-blue-small {
      width: 50vw;
      height: 50vw;
    }
  }
</style>

<script>
  // Pool de nombres de usuario ficticios
  const usernames: string[] = [
    "migue272", "juan001", "sofi10", "car_los22", "ana345", "martin88", 
    "gaby_77", "pedro123", "lucia55", "diego90", "vale_789", "eze444",
    "javi321", "mari_sol", "pablo777", "flor_66", "tomas111", "vicky_23",
    "leo888", "cami_45", "fede222", "juli_777", "santi456", "belen99",
    "nacho_23", "dani777", "gise_85", "maxi333", "ceci_44", "agus_90"
  ];
  
  // Pool de juegos (actualizada con los solicitados)
  const games: string[] = [
    "Aztec Gems", "Sweet Bonanza", "Jokers Jewels", "Diamond Explosion", 
    "Chilli Heat", "5 Lions", "Ruleta en Vivo", "Sugar Rush", "Zeus vs Hades"
  ];
  
  // Función para generar un premio aleatorio entre $8.000 y $250.000
  // con menor probabilidad para montos mayores a $100.000
  function generateRandomPrize(): string {
    // Determinar si será un premio alto (menos probable) o normal
    const isHighPrize = Math.random() < 0.25; // 25% de probabilidad de premio alto
    
    let prize: number;
    if (isHighPrize) {
      // Premio alto entre $100.001 y $250.000
      prize = Math.floor(Math.random() * (250000 - 100001 + 1)) + 100001;
    } else {
      // Premio normal entre $8.000 y $100.000
      prize = Math.floor(Math.random() * (100000 - 8000 + 1)) + 8000;
    }
    
    // Formato sin centavos
    return new Intl.NumberFormat('es-AR', { 
      style: 'currency', 
      currency: 'ARS',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(prize);
  }
  
  // Función para obtener un elemento aleatorio de un array
  function getRandomElement<T>(array: T[]): T {
    return array[Math.floor(Math.random() * array.length)];
  }
  
  // Función para generar un ganador aleatorio
  function generateRandomWinner() {
    return {
      username: getRandomElement(usernames),
      game: getRandomElement(games),
      prize: generateRandomPrize(),
    };
  }
  
  // Generar lista inicial de ganadores
  function generateInitialWinners(count: number) {
    const winners: ReturnType<typeof generateRandomWinner>[] = [];
    for (let i = 0; i < count; i++) {
      winners.push(generateRandomWinner());
    }
    return winners;
  }
  
  // Función para generar un número aleatorio entre min y max
  function getRandomNumber(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  
  // Función para actualizar la tabla de ganadores
  function updateWinnersTable(winners: ReturnType<typeof generateRandomWinner>[]) {
    const tableBody = document.getElementById('winners-table-body');
    if (!tableBody) return;
    
    // Limpiar tabla
    tableBody.innerHTML = '';
    
    // Agregar ganadores a la tabla
    winners.forEach((winner: ReturnType<typeof generateRandomWinner>, index: number) => {
      const row = document.createElement('tr');
      row.className = index === 0 ? 'new-winner' : '';
      
      row.innerHTML = `
        <td class="font-medium">${winner.username}</td>
        <td>${winner.game}</td>
        <td class="text-right text-casino-gold font-medium">${winner.prize}</td>
      `;
      
      tableBody.appendChild(row);
    });
  }
  
  // Función para actualizar contadores
  function updateCounters(newWinner: ReturnType<typeof generateRandomWinner>) {
    // Actualizar contador de ganadores
    const totalWinnersElement = document.getElementById('total-winners-count');
    if (totalWinnersElement) {
      // Parsear correctamente el número actual con formato de separador de miles
      const currentText = totalWinnersElement.textContent || '0';
      const currentCount = parseInt(currentText.replace(/\D/g, ''));
      totalWinnersElement.textContent = (currentCount + 1).toLocaleString('es-AR');
    }
    
    // Actualizar total pagado hoy
    const totalPaidElement = document.getElementById('total-paid-today');
    if (totalPaidElement) {
      const prizeValue = parseInt(newWinner.prize.replace(/[^\d]/g, ''));
      const currentTotal = parseInt(totalPaidElement.textContent?.replace(/[^\d]/g, '') || '12459350');
      const newTotal = currentTotal + prizeValue;
      // Mostrar el monto completo sin abreviar
      totalPaidElement.textContent = new Intl.NumberFormat('es-AR', { 
        style: 'currency', 
        currency: 'ARS',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(newTotal);
    }
  }
  
  // Función para generar un tiempo aleatorio entre 7 y 16 segundos
  function getRandomUpdateTime(): number {
    return (Math.floor(Math.random() * 10) + 7) * 1000; // 7-16 segundos en milisegundos
  }
  
  // Inicializar y manejar actualizaciones
  window.addEventListener('load', () => {
    // Generar lista inicial de 6 ganadores
    let winners = generateInitialWinners(6);
    
    // Actualizar tabla inicial
    updateWinnersTable(winners);
    
    // Inicializar contador de ganadores con un número aleatorio entre 80-200
    const totalWinnersElement = document.getElementById('total-winners-count');
    if (totalWinnersElement) {
      const initialWinners = getRandomNumber(80, 200);
      totalWinnersElement.textContent = initialWinners.toLocaleString('es-AR');
    }
    
    // Formatear los valores iniciales sin centavos
    const totalPaidElement = document.getElementById('total-paid-today');
    if (totalPaidElement) {
      const currentValue = totalPaidElement.textContent || '';
      const numericValue = parseInt(currentValue.replace(/[^\d]/g, '') || '12459350');
      totalPaidElement.textContent = new Intl.NumberFormat('es-AR', { 
        style: 'currency', 
        currency: 'ARS',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
      }).format(numericValue);
    }
    
    // Función recursiva para actualizar en intervalos aleatorios
    function scheduleNextUpdate() {
      const nextUpdateTime = getRandomUpdateTime();
      
      setTimeout(() => {
        // Generar nuevo ganador
        const newWinner = generateRandomWinner();
        
        // Agregar nuevo ganador al inicio
        winners.unshift(newWinner);
        
        // Mantener solo los últimos 6 ganadores
        if (winners.length > 6) {
          winners = winners.slice(0, 6);
        }
        
        // Actualizar la tabla
        updateWinnersTable(winners);
        
        // Actualizar contadores
        updateCounters(newWinner);
        
        // Programar próxima actualización
        scheduleNextUpdate();
      }, nextUpdateTime);
    }
    
    // Iniciar el ciclo de actualizaciones
    scheduleNextUpdate();
  });
</script>

<script define:vars={{ pixelEvent }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Para depuración
    console.log('Pixel event disponible:', pixelEvent);
    
    // Obtener el botón CTA
    const ctaButton = document.getElementById('cta-button');
    
    if (ctaButton) {
      ctaButton.addEventListener('click', (e) => {
        // Prevenir navegación inmediata
        e.preventDefault();
        
        // Usar una variable local para el evento
        const eventToTrack = pixelEvent || 'Lead';
        
        // Imprimir para depuración
        console.log('Tracking event:', eventToTrack);
        
        // Enviar el evento si fbq está disponible
        if (typeof fbq === 'function') {
          fbq('track', eventToTrack);
        }
        
        // Navegar después de un pequeño retraso
        setTimeout(() => {
          window.location.href = ctaButton.href;
        }, 300);
      });
    }
  });
</script>