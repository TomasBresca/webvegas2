---
const { whatsappLink1, whatsappLink2, pixelEvent } = Astro.props;
import '../styles/global.css';
---

<section class="relative min-h-screen flex flex-col items-center justify-center pt-16 md:pt-20 pb-4 md:pb-10 bg-gradient-to-b from-casino-purple to-[#1A0F36] overflow-hidden w-full">
  <!-- Efectos de luz fluida en el fondo -->
  <div class="absolute inset-0 z-0 overflow-hidden">
    <div class="fluid-light fluid-red"></div>
    <div class="fluid-light fluid-blue"></div>
    <div class="fluid-light fluid-red-small"></div>
    <div class="fluid-light fluid-blue-small"></div>
  </div>
  
  <!-- Elementos flotantes decorativos -->
  <div class="absolute inset-0 pointer-events-none">
    <div class="floating-element absolute top-1/4 left-10 w-12 h-12 opacity-30">
      <img src="/images/chips.svg" alt="" class="w-full h-full" />
    </div>
    <div class="floating-element absolute top-2/3 right-12 w-16 h-16 opacity-20">
      <img src="/images/ace.svg" alt="" class="w-full h-full" />
    </div>
  </div>
  
  <!-- Efecto de luz de fondo -->
  <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full h-full max-w-lg max-h-lg bg-casino-gold/10 blur-[100px] rounded-full"></div>
  
  <div class="w-full px-4 max-w-md mx-auto flex flex-col items-center justify-center relative z-10 py-4 md:py-8">
    <div id="battle-container" class="mb-6 md:mb-8 w-full flex flex-col items-center">
      <!-- Versus title - a√±adido margen adicional para laptop -->
      <h2 class="text-3xl text-white font-bold mb-6 md:mb-10 mt-2 md:mt-4">¬øCU√ÅL ELEGIR√çAS?</h2>
      
      <!-- Battle arena -->
      <div class="battle-arena relative w-full flex justify-between items-center gap-4 mb-6">
        <!-- Game 1: Sweet Bonanza -->
        <div id="card1" class="game-container w-5/12 aspect-square relative bg-gradient-to-b from-[#2c1a56]/90 to-[#1E1040]/70 border-2 border-[#FFD070]/40 rounded-lg shadow-lg overflow-hidden transform transition-all duration-500">
          <!-- El usuario a√±adir√° la imagen aqu√≠ -->
          <img src="/images/sweet-bonanza.png" alt="Sweet Bonanza" class="w-full h-full object-cover p-2" />
          
          <!-- T√≠tulo del juego -->
          <div class="absolute bottom-0 left-0 right-0 bg-[#1a0f36]/90 p-2 text-center border-t border-[#FFD070]/30">
            <h3 class="text-white text-sm font-bold text-shadow">Sweet Bonanza</h3>
          </div>
        </div>
        
        <!-- VS symbol -->
        <div id="vs-symbol" class="vs-symbol text-3xl font-extrabold text-[#FFD700] z-10">
          VS
        </div>
        
        <!-- Game 2: Jokers Jewels -->
        <div id="card2" class="game-container w-5/12 aspect-square relative bg-gradient-to-b from-[#2c1a56]/90 to-[#1E1040]/70 border-2 border-[#FFD070]/40 rounded-lg shadow-lg overflow-hidden transform transition-all duration-500">
          <!-- El usuario a√±adir√° la imagen aqu√≠ -->
          <img src="/images/jokers-jewels.png" alt="Jokers Jewels" class="w-full h-full object-cover p-2" />
          
          <!-- T√≠tulo del juego -->
          <div class="absolute bottom-0 left-0 right-0 bg-[#1a0f36]/90 p-2 text-center border-t border-[#FFD070]/30">
            <h3 class="text-white text-sm font-bold text-shadow">Jokers Jewels</h3>
          </div>
          
          <!-- Crown positioned directly above the Joker card -->
          <div id="crown" class="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-full w-16 h-16 opacity-0 transition-all duration-700">
            <img src="/images/crown.png" alt="Crown" class="w-full h-full object-contain" />
          </div>
        </div>
      </div>
      
      <!-- Result text (hidden initially) -->
      <div id="result-text" class="result-text text-center opacity-0 transform translate-y-8 transition-all duration-500">
        <p class="text-xl text-white font-bold">Jokers Jewels ¬°tiene los mejores premios!üòé</p>
      </div>
    </div>
    
    <!-- CTA Button -->
    <a
      id="cta-button" 
      href={whatsappLink1} 
      target="_blank" 
      rel="noopener" 
      class="cta-button w-full flex items-center justify-center gap-3 bg-gradient-to-r from-green-600 to-green-500 hover:from-green-500 hover:to-green-600 text-white text-xl font-extrabold py-5 px-6 rounded-xl transition-all hover:scale-105 shadow-xl"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="white" viewBox="0 0 24 24">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
      </svg>
      ¬°JUEGA AHORA!
    </a>
  </div>
  
  <!-- Textura de fondo -->
  <div class="absolute inset-0 bg-grid-pattern opacity-5"></div>
</section>

<style>
  .bg-grid-pattern {
    background-image: 
      linear-gradient(rgba(255, 193, 7, 0.1) 1px, transparent 1px),
      linear-gradient(90deg, rgba(255, 193, 7, 0.1) 1px, transparent 1px);
    background-size: 25px 25px;
  }
  
  .game-container {
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
    position: relative;
    overflow: hidden;
  }
  
  .game-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 50%;
    background: linear-gradient(to bottom, rgba(0,0,0,0.4), transparent);
    z-index: 1;
    pointer-events: none;
  }
  
  .text-shadow {
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
  }
  
  .cta-button {
    position: relative;
    overflow: hidden;
    box-shadow: 0 0 25px rgba(22, 163, 74, 0.5);
  }
  
  .cta-button::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.2) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(45deg);
    animation: shine 3s infinite;
  }
  
  @keyframes shine {
    0% {
      left: -100%;
      top: -100%;
    }
    100% {
      left: 100%;
      top: 100%;
    }
  }
  
  .winner-glow {
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.7);
    border-color: rgba(255, 215, 0, 0.8);
  }
  
  .loser-fade {
    opacity: 0.5;
    filter: grayscale(0.7);
  }
  
  .vs-symbol {
    text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
  }
  
  /* Animaciones para elementos flotantes */
  .floating-element:nth-child(1) {
    animation: floatElement1 6s ease-in-out infinite;
  }
  
  .floating-element:nth-child(2) {
    animation: floatElement2 9s ease-in-out infinite;
  }
  
  @keyframes floatElement1 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    33% { transform: translateY(-15px) rotate(5deg); }
    66% { transform: translateY(5px) rotate(-5deg); }
  }
  
  @keyframes floatElement2 {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(-8deg); }
  }
  
  /* Efectos de luz fluida (rojo y azul) */
  .fluid-light {
    position: absolute;
    border-radius: 100%;
    filter: blur(60px);
    opacity: 0.7;
    mix-blend-mode: screen;
  }
  
  .fluid-red {
    background: radial-gradient(circle, rgba(255, 50, 50, 1) 0%, rgba(180, 0, 0, 0.8) 60%, rgba(100, 0, 0, 0) 100%);
    width: 60vw;
    height: 60vw;
    max-width: 700px;
    max-height: 700px;
    top: 5%;
    left: 25%;
    animation: fluidMove1 5s ease-in-out infinite alternate;
  }
  
  .fluid-blue {
    background: radial-gradient(circle, rgba(50, 100, 255, 1) 0%, rgba(0, 40, 180, 0.8) 60%, rgba(0, 0, 100, 0) 100%);
    width: 55vw;
    height: 55vw;
    max-width: 650px;
    max-height: 650px;
    bottom: 10%;
    right: 10%;
    animation: fluidMove2 7s ease-in-out infinite alternate;
  }
  
  .fluid-red-small {
    background: radial-gradient(circle, rgba(255, 50, 50, 1) 0%, rgba(180, 0, 0, 0.8) 60%, rgba(100, 0, 0, 0) 100%);
    width: 35vw;
    height: 35vw;
    max-width: 400px;
    max-height: 400px;
    bottom: 15%;
    left: 10%;
    animation: fluidMove3 6s ease-in-out infinite alternate;
  }
  
  .fluid-blue-small {
    background: radial-gradient(circle, rgba(50, 100, 255, 1) 0%, rgba(0, 40, 180, 0.8) 60%, rgba(0, 0, 100, 0) 100%);
    width: 30vw;
    height: 30vw;
    max-width: 350px;
    max-height: 350px;
    top: 20%;
    right: 5%;
    animation: fluidMove4 8s ease-in-out infinite alternate;
  }
  
  @keyframes fluidMove1 {
    0% { transform: translate(-15%, -15%) rotate(0deg); }
    25% { transform: translate(0%, 15%) rotate(90deg); }
    50% { transform: translate(15%, 0%) rotate(180deg); }
    75% { transform: translate(0%, -15%) rotate(270deg); }
    100% { transform: translate(-15%, -15%) rotate(360deg); }
  }
  
  @keyframes fluidMove2 {
    0% { transform: translate(15%, 15%) rotate(0deg); }
    25% { transform: translate(0%, -15%) rotate(-90deg); }
    50% { transform: translate(-15%, 0%) rotate(-180deg); }
    75% { transform: translate(0%, 15%) rotate(-270deg); }
    100% { transform: translate(15%, 15%) rotate(-360deg); }
  }
  
  @keyframes fluidMove3 {
    0% { transform: translate(-12%, -12%) rotate(0deg); }
    33% { transform: translate(12%, 0%) rotate(120deg); }
    66% { transform: translate(0%, 12%) rotate(240deg); }
    100% { transform: translate(-12%, -12%) rotate(360deg); }
  }
  
  @keyframes fluidMove4 {
    0% { transform: translate(12%, 12%) rotate(0deg); }
    33% { transform: translate(-12%, 0%) rotate(-120deg); }
    66% { transform: translate(0%, -12%) rotate(-240deg); }
    100% { transform: translate(12%, 12%) rotate(-360deg); }
  }
  
  @media (max-width: 768px) {
    .fluid-red, .fluid-blue {
      width: 80vw;
      height: 80vw;
    }
    
    .fluid-red-small, .fluid-blue-small {
      width: 50vw;
      height: 50vw;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const card1 = document.getElementById('card1');
    const card2 = document.getElementById('card2');
    const vsSymbol = document.getElementById('vs-symbol');
    const crown = document.getElementById('crown');
    const resultText = document.getElementById('result-text');
    
    // Logging setup
    const log = (msg: string) => console.log(`[Battle Animation] ${msg}`);
    
    function runBattleAnimation() {
      try {
        log('Starting battle animation sequence');
        
        // Initial card animations
        setTimeout(() => {
          if (card1) card1.style.transform = 'scale(1.1) rotate(-5deg)';
          if (card2) card2.style.transform = 'scale(1.1) rotate(5deg)';
          log('Cards enlarged');
        }, 500);
        
        // Shake animation
        setTimeout(() => {
          if (card1) card1.style.transform = 'scale(1.1) rotate(5deg)';
          if (card2) card2.style.transform = 'scale(1.1) rotate(-5deg)';
          log('Cards shaking - position 1');
        }, 1000);
        
        setTimeout(() => {
          if (card1) card1.style.transform = 'scale(1.1) rotate(-5deg)';
          if (card2) card2.style.transform = 'scale(1.1) rotate(5deg)';
          log('Cards shaking - position 2');
        }, 1300);
        
        // Battle conclusion
        setTimeout(() => {
          // Card 1 loses
          if (card1) {
            card1.style.transform = 'scale(0.9) rotate(-5deg)';
            card1.classList.add('loser-fade');
          }
          
          // Card 2 (Joker) wins
          if (card2) {
            card2.style.transform = 'scale(1.2) rotate(5deg)';
            card2.classList.add('winner-glow');
          }
          
          // VS symbol fades
          if (vsSymbol) vsSymbol.style.opacity = '0';
          log('Battle concluded - Joker wins');
        }, 1800);
        
        // Crown appears and drops onto Joker's head
        setTimeout(() => {
          // Make crown visible but still above card
          if (crown) crown.style.opacity = '1';
          log('Crown appearing above Joker');
        }, 2300);
        
        // Crown lands on Joker's head (top of card)
        setTimeout(() => {
          // Move crown down to top of card
          if (crown) crown.style.transform = 'translate(-50%, -30%)';
          log('Crown landing on Joker');
        }, 2800);
        
        // Show result text
        setTimeout(() => {
          if (resultText) {
            resultText.style.opacity = '1';
            resultText.style.transform = 'translateY(0)';
            log('Result text displayed');
          } else {
            console.error('[Battle Animation] Result text element not found');
          }
        }, 3300);
      } catch (error) {
        console.error(`[Battle Animation Error] ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
    
    // Start the animation sequence
    setTimeout(runBattleAnimation, 600);
  });
</script>

<script define:vars={{ pixelEvent }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Para depuraci√≥n
    console.log('Pixel event disponible:', pixelEvent);
    
    // Obtener el bot√≥n CTA
    const ctaButton = document.getElementById('cta-button');
    
    if (ctaButton) {
      ctaButton.addEventListener('click', (e) => {
        // Prevenir navegaci√≥n inmediata
        e.preventDefault();
        
        // Usar una variable local para el evento
        const eventToTrack = pixelEvent || 'Lead';
        
        // Imprimir para depuraci√≥n
        console.log('Tracking event:', eventToTrack);
        
        // Enviar el evento si fbq est√° disponible
        if (typeof fbq === 'function') {
          fbq('track', eventToTrack);
        }
        
        // Navegar despu√©s de un peque√±o retraso
        setTimeout(() => {
          window.location.href = ctaButton.href;
        }, 300);
      });
    }
  });
</script>